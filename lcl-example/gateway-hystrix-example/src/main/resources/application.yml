server:
  port: 10000
spring:
  application:
    name: gateway-hystrix-example
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 #nacos作为服务注册的地址
      config:
        server-addr: 127.0.0.1:8848 #nacos作为配置中心的地址
        file-extension: yaml #执行yaml格式的配置
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: nacos-example  #路由的id，没有固定规则但是要求唯一，建议配合服务名
          uri: lb://nacos-example/   #匹配后提供服务的路由地址
          #uri: http://127.0.0.1:8001/  #匹配后提供服务的路由地址
          predicates:
            - Path=/nacos/**   #断言，路径相匹配进行路由
          filters:
            - name: RequestRateLimiter  #配置RequestRateLimiter的限流过滤器
              args:
                key-resolver: '#{@hostAddrKeyResolver}'  #用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
                redis-rate-limiter.replenishRate: 1   #令牌桶每秒填充平均速率。
                redis-rate-limiter.burstCapacity: 3   #令牌桶总容量。
            - name: Hystrix  #网关熔断降级
              args:
                name: fallbackcmd
                fallbackUri: forward:/fallback #转发
  redis: #网关限流依赖于redis
    host: 192.168.189.132
    port: 7101
# hystrix 信号量隔离，1.5秒后自动超时
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 1500
  shareSecurityContext: true
# 暴露端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always